openapi: 3.0.1
info:
  title: SimpleAPI
  description: Все URI начинающиеся с /api/admin доступны только администратору.
  version: 1.0.0
servers:
  - url: 'http://localhost:8000'
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: authorization
  schemas:
    Message:
      type: object
      properties:
        message:
          type: string
    UserAddress:
      type: object
      properties:
        address:
          type: string
        alias:
          type: string
    UserRole:
      type: string
      enum: ['Admin', 'User']
    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        phone:
          type: string
        avatar:
          type: string
        role:
          $ref: '#/components/schemas/UserRole'
        email:
          type: string
        emailVerified:
          type: string
        hash:
          type: string
        createdAt:
          type: string
        addresses:
          type: array
          items:
            type: string
    Tag:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        icon:
          type: string
    Category:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
    Product:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        cost:
          type: number
        description:
          type: string
        weight:
          type: number
        ingredients:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: object
            properties:
              title:
                type: string
              icon:
                type: string
        images:
          type: array
          items:
            type: string
    ProductExpand:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        cost:
          type: number
        show:
          type: boolean
        description:
          type: string
        weight:
          type: number
        ingredients:
          type: array
          items:
            type: string
        images:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    OrderCondition:
      type: string
      enum: [0, 10, 20, 30, 40]
      description: 0 - new, 10 - in process, 20 - in the way, 30 - is delivered, 40 - reject
    OrderExpand:
      type: object
      properties:
        _id:
          type: string
        condition:
          $ref: '#/components/schemas/OrderCondition'
        address:
          type: string
        phone:
          type: string
        cost:
          type: integer
        weight:
          type: integer
        createdAt:
          type: string
        username:
          type: string
        client:
          type: string
        additionalInformation:
          type: string
        time:
          type: integer
        delivery:
            type: boolean
        deliveryCost:
          type: integer
        deliveryCalculateManually:
          type: boolean
        products:
          type: object
          properties:
            count:
              type: integer
            cost:
              type: integer
            weight:
              type: integer
            product:
              $ref: '#/components/schemas/Product'
    Order:
      type: object
      properties:
        _id:
          type: string
        condition:
          $ref: '#/components/schemas/OrderCondition'
        address:
          type: string
        phone:
          type: string
        cost:
          type: integer
        weight:
          type: integer
        createdAt:
          type: string
        username:
          type: string
        client:
          type: string
        additionalInformation:
          type: string
        time:
          type: integer
        delivery:
            type: 'boolean'
        deliveryCost:
          type: integer
paths:
  /api/signin:
    post:
      summary: Создает сессию.
      security:
        - cookieAuth: []
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Wrong password or email.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '429':
          description: To many request
          content:
            appliaction/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  expiries:
                    type: string
  /api/signout:
    put:
      summary: Удаляет текущую сессию.
      security:
        - cookieAuth: []
      tags:
        - Auth
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
  /api/signout/all:
    put:
      summary: Удаляет все сессии пользователя кроме текущей.
      security:
        - cookieAuth: []
      tags:
        - Auth
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
  /api/signup:
    post:
      summary: Регистрация пользователя.
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                password:
                  type: string
                name:
                  type: string
                phone:
                  type: string
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid email, password or email is busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '429':
          description: To many request (disabled)
          content:
            appliaction/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  expiries:
                    type: string
  /api/admin/signup:
    post:
      summary: Создать пользователя.
      tags:
        - User
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                name:
                  type: string
                phone:
                  type: string
                emailVerified:
                  type: boolean
                  default: true
                role:
                  $ref: '#/components/schemas/UserRole'
      responses:
        '201':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/user:
    get:
      summary: Получить информацию о пользователе.
      security:
        - cookieAuth: []
      tags:
        - User
      responses:
        '200':
          description: Ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    patch:
      summary: Обновить пользователя
      security:
        - cookieAuth: []
      tags:
          - User
      requestBody:
        content:
          appliaction/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                avatar:
                  type: string
                phone:
                  type: string
                addresses:
                  type: array
                  items:
                    type: object
                    properties:
                      address:
                        type: string
                      alias:
                        type: string
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                data:
                  type: object
      responses:
        200:
          description: Ok.
          content:
            appliaction/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  role:
                    type: string
                  email:
                    type: string
                  name:
                    type: string
                  phone:
                    type: string
                  password:
                    type: string
                  addresses:
                    type: array
                    items:
                      type: object
                      properties:
                        address:
                          type: string
                        alias:
                          type: string
  /api/admin/user/{userId}:
    patch:
      summary: Обновить пользователя по id
      security:
        - cookieAuth: []
      tags:
          - User
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
      requestBody:
        content:
          appliaction/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                emailVerified:
                  type: boolean
                role:
                  type: string
                  enum: ['Admin', 'User']
                name:
                  type: string
                avatar:
                  type: string
                phone:
                  type: string
                addresses:
                  type: array
                  items:
                    type: object
                    properties:
                      address:
                        type: string
                      alias:
                        type: string
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                data:
                  type: object
      responses:
        200:
          description: Ok.
          content:
            appliaction/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Удалить пользователя
      security:
        - cookieAuth: []
      tags:
        - User
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
  /api/admin/users:
    get:
      summary: Get users list.
      security:
        - cookieAuth: []
      tags:
        - User
      parameters:
        - in: query
          name: sort
          schema:
            type: string
            default: 'DESC'
          description: ASC/DESC
        - in: query
          name: limit
          schema:
            type: number
          description: Number of users. Default 10
        - in: query
          name: page
          schema:
            type: number
          description: Skip dosc ((page - 1) * limit). default 1
        - in: query
          name: role
          schema:
            type: string
          description: Find by role
        - in: query
          name: email
          schema:
            type: string
          description: User email
        - in: query
          name: phone
          schema:
            type: string
          description: User phone
        - in: query
          name: strict
          schema:
            type: number
          description: Strict compliance with conditions. The value is not taken into account, only the presence of
        - in: query
          name: name
          schema:
            type: string
          description: User name
      responses:
        200:
          description: Ok.
          content:
            appliaction/json:
              schema:
                type: object
                properties:
                  total:
                    type: number
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        role:
                          type: string
                        name:
                          type: string
                        email:
                          type: string
                        emailVerified:
                          type: boolean
                        phone:
                          type: string
                        avatar:
                          type: string
                        createdAt:
                          type: string
  /api/categories:
    get:
      summary: Get categories list.
      tags:
        - Product-Category
      responses:
        200:
          description: Ok.
          content:
            appliaction/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
  /api/admin/product/categories:
    get:
      summary: Get categories list.
      security:
        - cookieAuth: []
      tags:
        - Product-Category
      responses:
        200:
          description: Ok.
          content:
            appliaction/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
  /api/admin/product/category:
    post:
      summary: Create category.
      security:
        - cookieAuth: []
      tags:
        - Product-Category
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
  /api/admin/product/category/{categoryId}:
    patch:
      summary: Update category.
      security:
        - cookieAuth: []
      tags:
        - Product-Category
      parameters:
        - in: path
          required: true
          name: categoryId
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
    delete:
      summary: Delete category.
      security:
        - cookieAuth: []
      tags:
        - Product-Category
      parameters:
        - in: path
          required: true
          name: categoryId
          schema:
            type: string
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
  /api/admin/product/tags:
    get:
      summary: Get tags list.
      security:
        - cookieAuth: []
      tags:
        - Product-Tag
      responses:
        200:
          description: Ok.
          content:
            appliaction/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
  /api/admin/product/tag:
    post:
      summary: Create tag.
      security:
        - cookieAuth: []
      tags:
        - Product-Tag
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
          multipart/form-data:
            schema:
              type: object
              properties:
                icon:
                  type: string
                  format: bunary
                data:
                  type: object
                  properties:
                    title:
                      type: string
      responses:
        '201':
          description: Created
          content:
            appliaction/json:
              schema:
                $ref: '#/components/schemas/Tag'
  /api/admin/product/tag/{tagId}:
    patch:
      summary: Update tag.
      security:
        - cookieAuth: []
      tags:
        - Product-Tag
      parameters:
        - in: path
          required: true
          name: tagId
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
          multipart/form-data:
            schema:
              type: object
              properties:
                icon:
                  type: string
                  format: bunary
                data:
                  type: object
                  properties:
                    title:
                      type: string
      responses:
        '200':
          description: Updated
          content:
            appliaction/json:
              schema:
                $ref: '#/components/schemas/Tag'
    delete:
      summary: Update tag.
      security:
        - cookieAuth: []
      tags:
        - Product-Tag
      parameters:
        - in: path
          required: true
          name: tagId
          schema:
            type: string
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
  /api/products:
    get:
      summary: Get products list for user
      tags:
        - Product
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: limit
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: category
          schema:
            type: string
          description: Id category
          required: true
        - in: query
          name: sortByDate
          schema:
            type: string
            enum: ['ASC', 'DESC']
            default: 'ASC'
      responses:
        200:
          description: Ok
          content:
            appliaction/json:
              schema:
                type: object
                properties:
                  total:
                    type: number
                  products:
                    type: array
                    items:
                      $ref: '#components/schemas/Product'
  /api/admin/products:
    get:
      summary: Get products list for admin
      tags:
        - Product
      security:
        - cookieAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: limit
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: category
          schema:
            type: string
          description: Id category
        - in: query
          name: sortByDate
          schema:
            type: string
            enum: ['ASC', 'DESC']
            default: 'ASC'
      responses:
        200:
          description: Ok
          content:
            appliaction/json:
              schema:
                type: object
                properties:
                  total:
                    type: number
                  products:
                    type: array
                    items:
                      $ref: '#components/schemas/ProductExpand'
  /api/admin/product:
    post:
      summary: Create product
      security:
        - cookieAuth: []
      tags:
        - Product
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                show:
                  type: boolean
                title:
                  type: string
                cost:
                  type: number
                description:
                  type: string
                ingredients:
                  type: array
                  items:
                    type: string
                weight:
                  type: number
                tags:
                  type: array
                  items:
                    type: string
                categories:
                  type: array
                  items:
                    type: string
          multipart/form-data:
            schema:
              type: object
              properties:
                data:
                  type: object
                images:
                  type: string
                  format: binary
      responses:
        '201':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#components/schemas/ProductExpand'
  /api/admin/product/{productId}:
    patch:
      summary: Update product
      security:
        - cookieAuth: []
      tags:
        - Product
      parameters:
        - in: path
          required: true
          name: productId
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                show:
                  type: boolean
                title:
                  type: string
                cost:
                  type: number
                description:
                  type: string
                ingredients:
                  type: array
                  items:
                    type: string
                weight:
                  type: number
                tags:
                  type: array
                  items:
                    type: string
                categories:
                  type: array
                  items:
                    type: string
                images:
                  type: array
                  items:
                    type: string
          multipart/form-data:
            schema:
              type: object
              properties:
                data:
                  type: object
                images:
                  type: string
                  format: binary
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#components/schemas/ProductExpand'
    delete:
      summary: Delete product.
      security:
        - cookieAuth: []
      tags:
        - Product
      parameters:
        - in: path
          required: true
          name: productId
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
  /api/order:
    post:
      summary: Create order.
      tags:
        - Order
      requestBody:
        content:
          appliaction/json:
            schema:
              type: object
              properties:
                products:
                  type: array
                  items:
                    type: object
                    properties:
                      product:
                        type: string
                      count:
                        type: number
                address:
                  type: string
                phone:
                  type: string
                username:
                  type: string
                additionalInformation:
                  type: string
                delivery:
                  type: boolean
                deliveryCost:
                  type: integer
                time:
                  type: integer
      responses:
        201:
          description: Create order.
          content:
            appliaction/json:
              schema:
                type: object
                properties:
                  order:
                    $ref: '#/components/schemas/OrderExpand'
  /api/order/{orderId}:
    get:
      summary: Get order by id for client
      tags:
        - Order
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: orderId
          schema:
            type: string
          required: true
      responses:
        200:
          description: Ok
          content:
            appliaction/json:
              schema:
                $ref: '#/components/schemas/OrderExpand'
        404:
          description: Order not found
          content:
            appliaction/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /api/admin/order/{orderId}:
    get:
      summary: Get order by id for admin
      tags:
        - Order
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: orderId
          schema:
            type: string
          required: true
      responses:
        200:
          description: Ok
          content:
            appliaction/json:
              schema:
                $ref: '#/components/schemas/OrderExpand'
        404:
          description: Order not found
          content:
            appliaction/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /api/orders:
    get:
      summary: Get orders for client
      security:
        - cookieAuth: []
      tags:
        - Order
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: condition
          schema:
            type: integer
            enum: [0, 10, 20, 30, 40]
          description: Filter by condition
        - in: query
          name: sortByDate
          schema:
            type: string
            enum: ['ASC', 'DESC']
        - in: query
          name: sortByCost
          schema:
            type: string
            enum: ['ASC', 'DESC']
        - in: query
          name: delivery
          schema:
            type: boolean
      responses:
        200:
          description: Ok
          content:
            appliaction/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
  /api/admin/orders/user/{userId}:
    get:
      summary: Get orders by client for admin
      security:
        - cookieAuth: []
      tags:
        - Order
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: condition
          schema:
            type: integer
            enum: [0, 10, 20, 30, 40]
          description: Filter by condition
        - in: query
          name: sortByDate
          schema:
            type: string
            enum: ['ASC', 'DESC']
        - in: query
          name: sortByCost
          schema:
            type: string
            enum: ['ASC', 'DESC']
        - in: query
          name: delivery
          schema:
            type: boolean
      responses:
        200:
          description: Ok
          content:
            appliaction/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
  /api/admin/orders:
    get:
      summary: Get orders
      security:
        - cookieAuth: []
      tags:
        - Order
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: condition
          schema:
            type: integer
            enum: [0, 10, 20, 30, 40]
          description: Filter by condition
        - in: query
          name: sortByDate
          schema:
            type: string
            enum: ['ASC', 'DESC']
        - in: query
          name: sortByCost
          schema:
            type: string
            enum: ['ASC', 'DESC']
        - in: query
          name: delivery
          schema:
            type: boolean
      responses:
        200:
          description: Ok
          content:
            appliaction/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
  /api/order/{orderId}/condition/{condition}:
    patch:
      summary: Изменение статуса заказа
      security:
        - cookieAuth: []
      tags:
        - Order
      parameters:
        - in: path
          name: orderId
          schema:
            type: string
          required: true
        - in: path
          name: condition
          schema:
            type: integer
            enum: [0, 10, 20, 30, 40]
          required: true
      responses:
        200:
          description: Ok
          content:
            appliaction/json:
              schema:
                type: object
                properties:
                  order:
                    type: object
                    properties:
                      _id:
                        type: string
                      condition:
                        type: integer
  /api/order/{orderId}/cancel:
    patch:
      summary: Отменить заказ. Только для статуса заказа меньше 10
      security:
        - cookieAuth: []
      tags:
        - Order
      parameters:
        - in: path
          name: orderId
          schema:
            type: string
          required: true
      responses:
        200:
          description: Ok
          content:
            appliaction/json:
              schema:
                $ref: '#/components/schemas/Message'
        403:
          description: Вы не можете отменить этот заказ
          content:
            appliaction/json:
              schema:
                $ref: '#/components/schemas/Message'